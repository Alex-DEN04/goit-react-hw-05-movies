{"version":3,"file":"static/js/871.78779ac7.chunk.js","mappings":"4TAEMA,EAAW,+BACXC,EAAU,mCAGHC,EAAS,mCAAG,oGACAC,IAAAA,IAAA,UAAaH,GAAb,OAHF,uBAG4C,CAC/DI,OAAQ,CACNC,QAASJ,KAHU,cACjBK,EADiB,yBAMhBA,EAASC,KAAKC,SANE,2CAAH,qDASTC,EAAY,mCAAG,WAAMC,GAAN,uFACHP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,GAAM,CAC1DN,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAMnBA,GANmB,2CAAH,sDASZK,EAAe,mCAAG,WAAMD,GAAN,uFACNP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAASJ,KAHgB,cACvBK,EADuB,yBAMtBA,GANsB,2CAAH,sDASfM,EAAe,mCAAG,WAAMF,GAAN,uFACNP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAASJ,KAHgB,cACvBK,EADuB,yBAMtBA,GANsB,2CAAH,sDASfO,EAAW,mCAAG,WAAMC,GAAN,uFACFX,IAAAA,IAAA,UAAaH,EAAb,iBAAsC,CAC3DI,OAAQ,CACNC,QAASJ,EACTc,MAAOD,KAJc,cACnBR,EADmB,yBAOlBA,GAPkB,2CAAH,qD,wHCQxB,UA7CgB,WACd,OAA0BU,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,gHAECd,EAAAA,EAAAA,IAAgBW,GAFjB,gBAEdhB,EAFc,EAEdA,KACRW,EAASX,GAHa,gDAKtBa,EAAS,EAAD,IALc,yBAOtBE,GAAW,GAPW,4EAAH,qDAYvB,OAFAI,IAEO,WACLR,EAAS,MACTE,EAAS,KACV,CACF,GAAE,CAACG,KAGF,gCACGF,IAAW,SAAC,IAAD,IACXJ,IACGA,EAAMT,QAAQmB,OAAS,IACvB,qEAEA,wBACGV,EAAMT,QAAQoB,KAAI,SAAAC,GAAI,OACrB,2BACE,qCAAaA,EAAKC,WAClB,uBAAID,EAAKE,YAFFF,EAAKnB,GADO,OAQ5BS,IAAS,wEAGf,C","sources":["api/api.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f895f2516a047e2a437ac29e4da65e26';\nconst trendingPeriod = '/trending/movie/day';\n\nexport const getMovies = async () => {\n  const response = await axios.get(`${BASE_URL}${trendingPeriod}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const searchMovie = async searchQuery => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response;\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [state, setState] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const { data } = await getMovieReviews(movieId);\n        setState(data);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieReviews();\n\n    return () => {\n      setState(null);\n      setError(null);\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {state &&\n        ((state.results.length < 1 && (\n          <p>We don't have any reviews for this film</p>\n        )) || (\n          <ul>\n            {state.results.map(item => (\n              <li key={item.id}>\n                <h4>Author: {item.author}</h4>\n                <p>{item.content}</p>\n              </li>\n            ))}\n          </ul>\n        ))}\n      {error && <div> Something went wrong, please try again </div>}\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["BASE_URL","API_KEY","getMovies","axios","params","api_key","response","data","results","getMovieById","id","getMovieCredits","getMovieReviews","searchMovie","searchQuery","query","useState","state","setState","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchMovieReviews","length","map","item","author","content"],"sourceRoot":""}