{"version":3,"file":"static/js/414.ed97360c.chunk.js","mappings":"4TAEMA,EAAW,+BAGJC,EAAS,mCAAG,oGACAC,IAAAA,IAAA,UAAaF,GAAb,OAHF,uBAG4C,CAC/DG,OAAQ,CACNC,QAAS,sCAHU,cACjBC,EADiB,yBAMhBA,EAASC,KAAKC,SANE,2CAAH,qDASTC,EAAY,mCAAG,WAAMC,GAAN,uFACHP,IAAAA,IAAA,UAAaF,EAAb,kBAA+BS,GAAM,CAC1DN,OAAQ,CACNC,QAAS,sCAHa,cACpBC,EADoB,yBAMnBA,GANmB,2CAAH,sDASZK,EAAe,mCAAG,WAAMD,GAAN,uFACNP,IAAAA,IAAA,UAAaF,EAAb,kBAA+BS,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAMtBA,GANsB,2CAAH,sDASfM,EAAe,mCAAG,WAAMF,GAAN,uFACNP,IAAAA,IAAA,UAAaF,EAAb,kBAA+BS,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAMtBA,GANsB,2CAAH,sDASfO,EAAW,mCAAG,WAAMC,GAAN,uFACFX,IAAAA,IAAA,UAAaF,EAAb,iBAAsC,CAC3DG,OAAQ,CACNC,QAAS,mCACTU,MAAOD,KAJc,cACnBR,EADmB,yBAOlBA,GAPkB,2CAAH,qD,uFCvCXU,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,2BACE,wBACGF,EAAMG,KAAI,SAAAC,GAAI,OACb,yBACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAKX,IAAMa,MAAO,CAAEC,KAAMN,GAAlD,SACGG,EAAKI,SAFDJ,EAAKX,GADD,OAUtB,C,yKCfYgB,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAO3B,OACE,SAAC,KAAD,CAAQC,cAPY,CAAEC,MAAO,IAOSF,SANrB,SAACG,EAAQC,GAC1BJ,EAASG,GACTC,EAAQC,WACT,EAGC,UACE,8BACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,0BAKT,E,UCmCD,EA9Ce,WACb,OAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM7B,EAAQ4B,EAAaE,IAAI,SA+B/B,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfR,GAAW,GAFI,UAGQ1B,EAAAA,EAAAA,IAAYE,GAHpB,mBAIa,KADpBR,EAHO,EAGPA,MACCC,QAAQwC,QAAiC,KAAjBjC,EAAMkC,OAJxB,iDAOfZ,EAAU9B,EAAKC,SAPA,kDASfiC,EAAS,EAAD,IATO,yBAWfF,GAAW,GAXI,6EAAH,qDAiBhB,OAHIxB,GACFgC,IAEK,WACLV,EAAU,MACVI,EAAS,KACV,CACF,GAAE,CAAC1B,KAGF,iCACE,SAACW,EAAD,CAAYC,SA/BK,SAAC,GAAe,IAC7BuB,EAD4B,EAAZrB,MACFoB,OACpBL,EAA0B,KAAVM,EAAe,CAAEnC,MAAOmC,GAAU,CAAC,EACpD,IA6BIV,IAAS,wEAAgDzB,EAAhD,OACTqB,IAAU,SAACpB,EAAA,EAAD,CAAYC,MAAOmB,IAC7BE,IAAW,SAACa,EAAA,EAAD,MAGjB,C","sources":["api/api.jsx","components/MoviesList/MoviesList.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst trendingPeriod = '/trending/movie/day';\n\nexport const getMovies = async () => {\n  const response = await axios.get(`${BASE_URL}${trendingPeriod}`, {\n    params: {\n      api_key: 'f895f2516a047e2a437ac29e4da65e26',\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n    params: {\n      api_key: 'f895f2516a047e2a437ac29e4da65e26',\n    },\n  });\n  return response;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits`, {\n    params: {\n      api_key: 'f895f2516a047e2a437ac29e4da65e26',\n    },\n  });\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews`, {\n    params: {\n      api_key: 'f895f2516a047e2a437ac29e4da65e26',\n    },\n  });\n  return response;\n};\n\nexport const searchMovie = async searchQuery => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: 'f895f2516a047e2a437ac29e4da65e26',\n      query: searchQuery,\n    },\n  });\n  return response;\n};\n","import { NavLink, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ items }) => {\n  const location = useLocation();\n  return (\n    <main>\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            <NavLink to={`/muvies/${item.id}`} state={{ from: location }}>\n              {item.title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n};\n","import { Formik, Form, Field } from 'formik';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const initialValues = { input: '' };\n  const formSubmit = (values, actions) => {\n    onSubmit(values);\n    actions.resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={formSubmit}>\n      <section>\n        <Form>\n          <Field type=\"text\" name=\"input\" />\n          <button type=\"submit\">Search</button>\n        </Form>\n      </section>\n    </Formik>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { searchMovie } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { SearchForm } from '../../components/Form/Form';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handleSubmit = ({ input }) => {\n    const value = input.trim();\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const { data } = await searchMovie(query);\n        if (data.results.length === 0 && query.trim() === '') {\n          return;\n        }\n        setMovies(data.results);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (query) {\n      fetchMovie();\n    }\n    return () => {\n      setMovies(null);\n      setError(null);\n    };\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit} />\n      {error && <div>Sorry, no movies were found with the name {query}.</div>}\n      {movies && <MoviesList items={movies} />}\n      {loading && <Loader />}\n    </>\n  );\n};\nexport default Movies;\n"],"names":["BASE_URL","getMovies","axios","params","api_key","response","data","results","getMovieById","id","getMovieCredits","getMovieReviews","searchMovie","searchQuery","query","MoviesList","items","location","useLocation","map","item","to","state","from","title","SearchForm","onSubmit","initialValues","input","values","actions","resetForm","type","name","useState","movies","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMovie","length","trim","value","Loader"],"sourceRoot":""}