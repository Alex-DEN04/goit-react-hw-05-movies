{"version":3,"file":"static/js/681.2432ada4.chunk.js","mappings":"4TAEMA,EAAW,+BACXC,EAAU,mCAGHC,EAAS,mCAAG,oGACAC,IAAAA,IAAA,UAAaH,GAAb,OAHF,uBAG4C,CAC/DI,OAAQ,CACNC,QAASJ,KAHU,cACjBK,EADiB,yBAMhBA,EAASC,KAAKC,SANE,2CAAH,qDASTC,EAAY,mCAAG,WAAMC,GAAN,uFACHP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,GAAM,CAC1DN,OAAQ,CACNC,QAASJ,KAHa,cACpBK,EADoB,yBAMnBA,GANmB,2CAAH,sDASZK,EAAe,mCAAG,WAAMD,GAAN,uFACNP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAASJ,KAHgB,cACvBK,EADuB,yBAMtBA,GANsB,2CAAH,sDASfM,EAAe,mCAAG,WAAMF,GAAN,uFACNP,IAAAA,IAAA,UAAaH,EAAb,kBAA+BU,EAA/B,YAA6C,CAClEN,OAAQ,CACNC,QAASJ,KAHgB,cACvBK,EADuB,yBAMtBA,GANsB,2CAAH,sDASfO,EAAW,mCAAG,WAAMC,GAAN,uFACFX,IAAAA,IAAA,UAAaH,EAAb,iBAAsC,CAC3DI,OAAQ,CACNC,QAASJ,EACTc,MAAOD,KAJc,cACnBR,EADmB,yBAOlBA,GAPkB,2CAAH,qD,kKCxCXU,EAAWC,EAAAA,EAAAA,IAAH,yCAGRC,EAAOD,EAAAA,EAAAA,GAAH,kD,mBCsDjB,EApDa,WACX,OAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,gHAEClB,EAAAA,EAAAA,IAAgBe,GAFjB,gBAEdnB,EAFc,EAEdA,KACRc,EAASd,GAHa,gDAKtBgB,EAAS,EAAD,IALc,yBAOtBE,GAAW,GAPW,4EAAH,qDAWvB,OADAI,IACO,WACLR,EAAS,MACTE,EAAS,KACV,CACF,GAAE,CAACG,KAGF,gCACGF,IAAW,SAACM,EAAA,EAAD,IACXV,IACC,SAACF,EAAD,UACGE,EAAMW,KAAKC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACd,0BACGF,GACC,SAAClB,EAAD,CACEqB,IAAG,UA7BG,mCA6BH,OAAqBH,GACxBI,IAAI,YAGN,SAACtB,EAAD,CAAUqB,IAlCtB,iIAkCmCC,IAAI,YAE7B,uBAAIH,KACJ,uCAAeC,OAVRH,EADK,MAgBnBX,IAAS,wEAGf,C","sources":["api/api.jsx","pages/Cast/CastStyled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f895f2516a047e2a437ac29e4da65e26';\nconst trendingPeriod = '/trending/movie/day';\n\nexport const getMovies = async () => {\n  const response = await axios.get(`${BASE_URL}${trendingPeriod}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`${BASE_URL}/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response;\n};\n\nexport const searchMovie = async searchQuery => {\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response;\n};\n","import styled from '@emotion/styled';\n\nexport const ActorImg = styled.img`\n  width: 150px;\n`;\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from 'api/api';\nimport { ActorImg, List } from './CastStyled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [state, setState] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const avatar =\n    'https://kartinkin.net/pics/uploads/posts/2022-09/1662642152_1-kartinkin-net-p-risunok-na-avatarku-dlya-muzhchin-instagra-1.jpg';\n  const pathPosterUrl = 'https://image.tmdb.org/t/p/w300';\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      try {\n        const { data } = await getMovieCredits(movieId);\n        setState(data);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCredits();\n    return () => {\n      setState(null);\n      setError(null);\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {state && (\n        <List>\n          {state.cast.map(({ cast_id, profile_path, name, character }) => (\n            <li key={cast_id}>\n              {profile_path ? (\n                <ActorImg\n                  src={`${pathPosterUrl}${profile_path}`}\n                  alt=\"avatar\"\n                />\n              ) : (\n                <ActorImg src={avatar} alt=\"avatar\" />\n              )}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </List>\n      )}\n      {error && <div> Something went wrong, please try again </div>}\n    </>\n  );\n};\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","getMovies","axios","params","api_key","response","data","results","getMovieById","id","getMovieCredits","getMovieReviews","searchMovie","searchQuery","query","ActorImg","styled","List","useState","state","setState","error","setError","loading","setLoading","movieId","useParams","useEffect","fetchMovieCredits","Loader","cast","map","cast_id","profile_path","name","character","src","alt"],"sourceRoot":""}